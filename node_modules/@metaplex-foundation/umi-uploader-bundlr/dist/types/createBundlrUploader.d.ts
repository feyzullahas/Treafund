import type { default as NodeBundlr, WebBundlr } from '@bundlr-network/client';
import { Context, Signer, SolAmount, UploaderInterface } from '@metaplex-foundation/umi';
import { Connection as Web3JsConnection, PublicKey as Web3JsPublicKey, SendOptions as Web3JsSendOptions, Signer as Web3JsSigner, Transaction as Web3JsTransaction, TransactionSignature as Web3JsTransactionSignature } from '@solana/web3.js';
export type BundlrUploader = UploaderInterface & {
    bundlr: () => Promise<NodeBundlr | WebBundlr>;
    getUploadPriceFromBytes: (bytes: number) => Promise<SolAmount>;
    getBalance: () => Promise<SolAmount>;
    fund: (amount: SolAmount, skipBalanceCheck: boolean) => Promise<void>;
    withdrawAll: (amount: SolAmount) => Promise<void>;
    withdraw: (amount: SolAmount) => Promise<void>;
};
export type BundlrUploaderOptions = {
    address?: string;
    timeout?: number;
    providerUrl?: string;
    priceMultiplier?: number;
    payer?: Signer;
};
export type BundlrWalletAdapter = {
    publicKey: Web3JsPublicKey | null;
    signMessage?: (message: Uint8Array) => Promise<Uint8Array>;
    signTransaction?: (transaction: Web3JsTransaction) => Promise<Web3JsTransaction>;
    signAllTransactions?: (transactions: Web3JsTransaction[]) => Promise<Web3JsTransaction[]>;
    sendTransaction: (transaction: Web3JsTransaction, connection: Web3JsConnection, options?: Web3JsSendOptions & {
        signers?: Web3JsSigner[];
    }) => Promise<Web3JsTransactionSignature>;
};
export declare function createBundlrUploader(context: Pick<Context, 'rpc' | 'payer' | 'eddsa'>, options?: BundlrUploaderOptions): BundlrUploader;
export declare const isBundlrUploader: (uploader: UploaderInterface) => uploader is BundlrUploader;
